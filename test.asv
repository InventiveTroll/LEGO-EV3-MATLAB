function test()
    % --- LEGO EV3 Remote Control with Obstacle Avoidance ---
    % Requirements:
    %   Ultrasonic Sensor -> Port 1
    %   Color Sensor      -> Port 2
    %   Motors            -> A (left), D (right)

    clc;
    

    % --- Try connecting to EV3 ---
    try
        brick = ConnectBrick('ACCESOR');
        brick.beep();
        disp(' Connected to EV3 Brick');
    catch ME
        error(' Could not connect to EV3 brick: %s', ME.message);
    end

    % --- Settings ---
    speed = 50;                 % motor speed
    distanceThreshold = 20;     % obstacle detection distance (cm)
    turnTime = 0.8;             % seconds to turn left
    pauseTime = 0.2;            % pause after turn

    % --- Initialize persistent variables ---
    distHistory = repmat(999, [1,5]);

    % --- Instructions ---
    fprintf('\nKeyboard Controls:\n');
    fprintf('  W = Forward\n');
    fprintf('  S = Backward\n');
    fprintf('  A = Turn Left\n');
    fprintf('  D = Turn Right\n');
    fprintf('  Q = Quit\n\n');

    % --- Main control loop ---
    while true
        % --- Read sensors ---
        dist = brick.UltrasonicDist(1);  % cm
        colorVal = brick.ColorCode(2);   % color ID (1=black, 6=white, etc.)

        % --- Filter invalid readings ---
        if dist <= 0 || dist > 200
            dist = 999; % treat as "no obstacle"
        end

        % --- Update distance history ---
        distHistory = [distHistory(2:end), dist];
        avgDist = mean(distHistory);

        % --- Stable obstacle detection ---
        if avgDist < distanceThreshold
            brick.StopMotor('AD', 'Brake');
            brick.beep();
            disp(' Stable obstacle detected â€” turning left...');
            brick.MoveMotor('A', -speed);
            brick.MoveMotor('D', speed);
            pause(turnTime);
            brick.StopMotor('AD', 'Brake');
            pause(pauseTime);
            distHistory = repmat(999, [1,5]); % reset filter
            continue; % skip manual control for this loop
        end

        % --- Optional color sensor logic (e.g. stop if red detected) ---
        if colorVal == 5 % Red
            brick.StopMotor('AD', 'Brake');
            brick.beep();
            disp(' Red detected â€” stopping.');
            pause(1);
            continue;
        end

        % --- Manual control interface ---
        if kbhit(1)
            key = getkey();
            switch lower(key)
                case 'w'
                    brick.MoveMotor('A', speed);
                    brick.MoveMotor('D', speed);
                case 's'
                    brick.MoveMotor('A', -speed);
                    brick.MoveMotor('D', -speed);
                case 'a'
                    brick.MoveMotor('A', -speed);
                    brick.MoveMotor('D', speed);
                case 'd'
                    brick.MoveMotor('A', speed);
                    brick.MoveMotor('D', -speed);
                case 'q'
                    brick.StopMotor('AD', 'Brake');
                    brick.beep();
                    disp(' Exiting program...');
                    break;
                otherwise
                    brick.StopMotor('AD', 'Brake');
            end
        else
            % Stop motors when no key pressed
            brick.StopMotor('AD', 'Brake');
        end

        % --- Debug printout (optional) ---
        fprintf('RawDist: %.1f | AvgDist: %.1f | Color: %d\n', dist, avgDist, colorVal);
        pause(0.05);
    end

    % --- Disconnect safely ---
    brick.StopMotor('AD', 'Brake');
    brick.beep();
    disp('ðŸ”Œ Disconnected cleanly.');
end
